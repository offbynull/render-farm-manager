#!/bin/bash

# Copyright (c) 2018, Kasra Faghihi, All rights reserved.
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library.



# Check is root
if [ $UID != "0" ]
then
    echo Root required >&2
    exit 1
fi



# Create temp output location
temp_dir=$(mktemp -d)
if [ $? != 0 ]
then
    echo Temp dir creation failed >&2
    exit 1
fi

function finish {
  rm -rf "$temp_dir"
}
trap finish 0 # http://redsymbol.net/articles/bash-exit-traps/ and https://stackoverflow.com/q/8122779 



# Update SSHd config to permit root login via pubpriv key
if [ ! -f "/etc/ssh/sshd_config" ]
then
    echo SSHd config not found >&2
    exit 1
fi

sed -i -e "s/PermitRootLogin\s\{1,\}no/PermitRootLogin prohibit-password/" /etc/ssh/sshd_config
if [ $? != 0 ]
then
    echo SSHd config update failed >&2
    exit 1
fi

systemctl restart sshd
if [ $? != 0 ]
then
    echo SSHd service cannot be restarted >&2
    exit 1
fi



# Generate pubpriv key and output details
key_passwd=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13) # generate string
key_file_priv="$temp_dir/key"
key_file_pub="$temp_dir/key.pub"

ssh-keygen -q -t rsa -b 4096 -C "Created by primer" -N $key_passwd -f $key_file_priv
if [ $? != 0 ]
then
    echo Key generation failed >&2
    exit 1
fi
if [ ! -f $key_file_priv ]
then
    echo Private key file not found >&2
    exit 1
fi
if [ ! -f $key_file_pub ]
then
    echo Public key file not found >&2
    exit 1
fi

key_priv=$(cat "$key_file_priv")
if [ $? != 0 ]
then
    echo Failed to read private key
    exit 1
fi
key_pub=$(cat "$key_file_pub")
if [ $? != 0 ]
then
    echo Failed to read public key
    exit 1
fi
rm "$key_file_priv"
rm "$key_file_pub"

echo !KEYPASSWORD
echo "$key_passwd" | wc -l
echo "$key_passwd"
echo !KEYPRIV
echo "$key_priv" | wc -l
echo "$key_priv"
echo !KEYPUB
echo "$key_pub" | wc -l
echo "$key_pub"



# Add public key to SSH authorized keys
mkdir -p ~root/.ssh  # Ensure .ssh directory exists
if [ $? != 0 ]
then
    echo Failed to force create .ssh directory
    exit 1
fi

if [ -f ~root/.ssh/authorized_keys ]  # Remove previously generated keys created by this script
then
    removed_generated_pub_keys=$(grep -v -e "Created by primer$" ~root/.ssh/authorized_keys 2>/dev/null)
    if [ $? -ge 2 ] # https://www.gnu.org/software/grep/manual/html_node/Exit-Status.html
    then
        echo Failed to read primed ssh keys
        exit 1
    fi

    echo "$removed_generated_pub_keys" >~root/.ssh/authorized_keys 2>/dev/null
    if [ $? != 0 ]
    then
        echo Failed to read primed ssh keys
        exit 1
    fi
fi

echo "$key_pub" >> ~root/.ssh/authorized_keys  # Add newly generated pub key created by this script
if [ $? != 0 ]
then
    echo Failed to write key to authorized keys list
    exit 1
fi



# Get fingerprints
fingerprints=""
host_key_files=$(find /etc/ssh | grep ssh_host_.*_key$)
for host_key_file in $host_key_files
do
    # ssh-keygen hashes the key to get the fingerprint and outputs it with a bunch of other data, while cut pulls out the actual hash while
    # ignoring the other info generated by ssh-keygen.
    #
    # ssh-keygen example output:  2048 SHA256:ssyMcxeRiaGaPQ6DjGDck+gJw0C2Mo2Pt3FtIltdgM8 root@ubuntu-s-2vcpu-4gb-lon1-01 (RSA)
    # cut example output:         SHA256:ssyMcxeRiaGaPQ6DjGDck+gJw0C2Mo2Pt3FtIltdgM8
    fingerprint_raw=$(ssh-keygen -l -f $host_key_file)
    if [ $? != 0 ]
    then
        echo Failed to extract fingerprint raw
        exit 1
    fi

    fingerprint=$(echo "$fingerprint_raw" | cut -d " " -f 2)
    if [ $? != 0 ]
    then
        echo Failed to extract fingerprint hash
        exit 1
    fi

    if [ -z "$fingerprints" ]
    then
        fingerprints=$fingerprint
    else
        fingerprints=$fingerprints$'\n'$fingerprint
    fi
done

echo !FINGERPRINTS
echo "$fingerprints" | wc -l
echo "$fingerprints"
